package main

import (
	"bytes"
	"compress/gzip"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"github.com/joho/godotenv"
)

// import "log"

type Data struct {
	Cookie string `json:"cookie"`
	Auth   string `json:"auth"`
}

// Define structs matching your GraphQL response structure
type Address struct {
	Ethereum string `json:"ethereum"`
	Tomo     string `json:"tomo"`
	Loom     string `json:"loom"`
	Ronin    string `json:"ronin"`
}

type Settings struct {
	UnsubscribeLandDelegationEmail bool `json:"unsubscribeLandDelegationEmail"`
	UnsubscribeNotificationEmail   bool `json:"unsubscribeNotificationEmail"`
}

type Referral struct {
	Code    string `json:"code"`
	Address string `json:"address"`
	AddedAt string `json:"addedAt"`
}

type ProfileBrief struct {
	AccountID          string   `json:"accountId"`
	Addresses          Address  `json:"addresses"`
	Email              string   `json:"email"`
	Activated          bool     `json:"activated"`
	Name               string   `json:"name"`
	Settings           Settings `json:"settings"`
	Referral           Referral `json:"referral"`
	IsScholar          bool     `json:"isScholar"`
	FortuneSlipBalance int      `json:"fortuneSlipBalance"`
}


type GraphQLRequest struct {
	OperationName string                 `json:"operationName"`
	Variables     map[string]interface{} `json:"variables"`
	Query         string                 `json:"query"`
}

type GraphQLResponse struct {
	Data struct {
		Profile ProfileBrief `json:"profile"`
	} `json:"data"`
	Errors []struct {
		Message string `json:"message"`
	} `json:"errors"`
}

const (
	url         = "https://graphql-gateway.axieinfinity.com/graphql"
	contentType = "application/json"
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	dataStr := os.Getenv("DATA")
	if dataStr == "" {
		log.Fatal("DATA not set")
	}

	var data []Data
	err = json.Unmarshal([]byte(dataStr), &data)
	if err != nil {
		log.Fatal(err)
	}

	for _, d := range data {
		GetProfileBrief(d)
	}

	// // Define HTTP handler function
	// log.Print("starting server...")
	// http.HandleFunc("/", handler)

	// // Determine port for HTTP service.
	// port := os.Getenv("PORT")
	// if port == "" {
	// 	port = "3000"
	// 	log.Printf("defaulting to port %s", port)
	// }

	// // Start HTTP server.
	// log.Printf("listening on port %s", port)
	// if err := http.ListenAndServe(":"+port, nil); err != nil {
	// 	log.Fatal(err)
	// }
}

// func handler(w http.ResponseWriter, r *http.Request) {
// 	// name := os.Getenv("NAME")
// 	// if name == "" {
// 	// 	name = "World"
// 	// }
// 	// fmt.Fprintf(w, "Hello %s!\n", name)
// }

func GetRequest(d *Data, query string) []byte {
	// Define the GraphQL query

	// Create the GraphQL request payload
	requestPayload := GraphQLRequest{
		OperationName: "GetProfileBrief",
		Variables:     map[string]interface{}{},
		Query:         query,
	}

	// Encode the request payload as JSON
	requestBody, err := json.Marshal(requestPayload)
	if err != nil {
		log.Fatalf("Failed to encode request payload: %v", err)
	}

	// Create a new HTTP request
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(requestBody))
	if err != nil {
		log.Fatalf("Failed to create HTTP request: %v", err)
	}

	// Set headers
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Accept-Encoding", "gzip, deflate, br")
	req.Header.Set("Accept-Language", "en-US")
	req.Header.Set("Authorization", "Bearer " + d.Auth)
	req.Header.Set("Content-Length", fmt.Sprintf("%d", len(requestBody)))
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Cookie", d.Cookie)
	req.Header.Set("Host", "graphql-gateway.axieinfinity.com")
	req.Header.Set("Origin", "https://app.axieinfinity.com")
	req.Header.Set("Priority", "u=1, i")
	req.Header.Set("Referer", "https://app.axieinfinity.com/")
	req.Header.Set("Sec-Ch-Ua", `"Not/A)Brand";v="8", "Chromium";v="126"`)
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("Sec-Ch-Ua-Platform", `"Linux"`)
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Site", "same-site")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.127 Safari/537.36")

	// Send the HTTP request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatalf("Failed to send HTTP request: %v", err)
	}
	defer resp.Body.Close()

	var reader io.Reader
	switch resp.Header.Get("Content-Encoding") {
	case "gzip":
		reader, err = gzip.NewReader(resp.Body)
		if err != nil {
			log.Fatalf("Failed to create gzip reader: %v", err)
		}
		defer reader.(*gzip.Reader).Close()
	default:
		reader = resp.Body
	}
	// Read the response body
	body, err := io.ReadAll(reader)
	if err != nil {
		log.Fatalf("Failed to read response body: %v", err)
	}

	return body
}
	//GetProfileBrief
// Suggested code may be subject to a license. Learn more: ~LicenseLog:2678549776.
func GetProfileBrief(d Data) GraphQLResponse {
	query := `query GetProfileBrief {
		profile {
		  ...ProfileBrief
		  __typename
		}
	  }
	  
	  fragment ProfileBrief on AccountProfile {
		accountId
		addresses {
		  ...Addresses
		  __typename
		}
		email
		activated
		name
		settings {
		  unsubscribeLandDelegationEmail
		  unsubscribeNotificationEmail
		  __typename
		}
		referral {
		  ...AccountReferralFragement
		  __typename
		}
		isScholar
		fortuneSlipBalance
		__typename
	  }
	  
	  fragment Addresses on NetAddresses {
		ethereum
		tomo
		loom
		ronin
		__typename
	  }
	  
	  fragment AccountReferralFragement on AccountReferral {
		code
		address
		addedAt
		__typename
	  }`
	body := GetRequest(&d, query)
	var response GraphQLResponse
	err := json.Unmarshal(body, &response)
	if err != nil {
		log.Fatalf("Failed to unmarshal response body: %v", err)
	}

	// Check for GraphQL errors
	if len(response.Errors) > 0 {
		for _, err := range response.Errors {
			fmt.Printf("GraphQL Error: %s\n", err.Message)
		}
	}

	return response
}

func PrintProfile(response GraphQLResponse) {
	fmt.Printf("========================================================================================\n")
	// Access the parsed data
	profile := response.Data.Profile
	fmt.Printf("%s\n\t\n", profile.Name)
	// fmt.Printf("Name: %s\n", profile.Name)
	// fmt.Printf("Address: %s\n", profile.Addresses.Ronin)
	fmt.Printf("========================================================================================\n")
}
